
12/19/2021
----------

Test Automation Day 23
-----------------------

Wrap up selenium waits
Practice with Page object and select drop downs
go over the testNg framework and other features
Start up with Cucumber BDD
------------------------------------------------

Review:
	How to handle syncronization in Selenium?

There 2 main types of waits:
	-> implicit wait :
		driver.manage().timeouts().implicitlyWait(10,TimeUnit.SECONDS );
	-> explicit wait :
		WebDriverWait, ExpectedConditions

		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("q")));

	-> FluentWait: is also part of explicit wait. we can manually specify the condition	, how often to check, timeout, what exception to ignore.

add new package day23_fluentwait_testNg_overview
add new class FluentWaitDemoTest

@Test
public void fluentWaitTest() {
	driver.get(ConfigurationReader.getProperty("practice.base.url"));

}

 Wait<WebDriver> wait = new FluentWait<WebDriver>(driver)
                .withTimeout(30, TimeUnit.SECONDS)
                .pollingEvery(1, TimeUnit.SECONDS)
                .ignoring(NoSuchElementException.class);


  When using FluentWait, we can manually specify:
  	timeout, frequency of checking for condition, ignoring specific exception

 ==============================

 Waits in Selenium:
 	-> implicit wait
 	-> explicit wait:
 			-> WebDriverWait
 			-> FluentWait

 Wait using java:
 	Thread.sleep(1000);
===========================

Wait<WebDriver> wait = new FluentWait<WebDriver>(driver)
                .withTimeout(30, TimeUnit.SECONDS)
                .pollingEvery(1, TimeUnit.SECONDS)
                .ignoring(NoSuchElementException.class);

WebElement header = wait.until(new Function<WebDriver, WebElement>() {
            public WebElement apply(WebDriver driver) {
                //any custom conditions based on your situation can be added here
                return driver.findElement(By.className("h1y"));
            }
        });

Then we specify the condition using wait.until method. and implement apply method.
Good thing about FluentWait, is :
	#1 you can still use ExpectedConditions
	#2 you can write custom conditions based on your application situation. in case ExpectedConditions does not provide the condition that you need to use.
=======================================

What is the difference between Implicit wait and explicit wait?

-> Implicit wait time is set once globally and applies to all steps.:
driver.manage().timeouts().implicitlyWait(10,TimeUnit.SECONDS );

-> Explicit wait is applied to a specific element on the page

-> Implicit wait works with findElement method and waits until element is present in html/dom (document object model)
-> Explicit wait can be applied with different conditions that are available in ExpectedConditions class

-> Implicit wait stops waiting as soon as element is found in the html/dom
-> Explicit wait stops waiting when certain condition is met. like visibility of elem. or enable of elem etc

-> Implicit wait throws NoSuchElementException if element does not appear in html/dom during the timeout
-> Explicit wait throws TimeOutException if condition is not met within the specified seconds

-> Explicit wait can be implented using WebDriverWait or FluentWait classes
=====================================

WebDriverWait vs FluentWait

- WebDriverWait extends FluentWait class
- Both are used for EXPLICIT wait in selenium
- we can specify conditions for the particular element
- WebDriverWait -> we specify: timeout and condition using ExpectedConditions
- FluentWait -> we specify: timeout, polling frequency, ignoring a specific exception
- FluentWait -> we can implement custom conditions as well as use ExpectedConditions
==============================

edmunds.url=https://www.edmunds.com

public class EdmundsNewCarSearchTest {

	@Test
	public void searchForNewCarTest() {
		driver.get(ConfigurationReader.getProperty("edmunds.url"));

	}
}
--------------------------

When writing page objects for our application, we can implement INHERITANCE, ABSTRACTION

all page classes will goto pages package.

We add a parent abstract class BasePage

add common variables, methods, constructor to it.

EdmundsHomePage extends BasePage
EdmundsNewCarPage extends BasePage
EdmundsCarDetailsPage extends BasePage

======================================

TestBase -> inherited by test classes
		GoogleSearchTest -> @Test
		EtsyLoginTest -> @Test

BasePage -> inherited by Page object classes
		GoogleHomePage -> @FindBy etc
		EdmundsHomePage -> -> @FindBy etc