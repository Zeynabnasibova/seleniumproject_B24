12/18/2021 | Saturday
----------

Automation Day 22
-----------------

Explicit wait intro

--------------------

maven lifecycle

mvn clean test -> we used this command to run all the tests.

maven lifecycle

maven is a build tool. This the most popular build tool.

Build -> when we create a project and write application code.
In order to make it available for others to use this application, it needs to be deployed and running in server.
EX: when we open google.com, it will go to google page.
It means google application was deployed to server and we as users can access it.

So to reach the deployment level, the maven project needs to go through number of steps.
Those steps are done using maven, and they are called Maven lifecycle.

validate -> it validates the project that has no errors.
compile -> compiles java classes.
test -> runs all the tests in test package
package -> will run all the tests and also create a jar file for your project. And using that jar file, your maven project can be deployed and can also be shared in mvnrepository

install -> it makes sure all dependencies are downloaded and added and also creates a jar file for your project.

clean -> delete the target folder in the project

At work, when you first get your project, i always run:

mvn clean install -U

-U -> forcefully check each dependency

the above commmand will first delete the target folder.
checks each dependency
compiles each java class
runs all tests
creates a jar file for your project.
jar file is like a Zip file. it contains all your classes and packages in same jar file.
java archive file.

Like a zip lock that has all your jave classes and packages, basically your whole project.

mvn clean install -U Is mainly used for app development projects.
But we can also use same for automation maven projects.

mvn clean install -U
	and click ENTER
	if mvn is not recognized error appears.
		MAC -> Command + ENTER
		Windows -> Control + ENTER

To stop the tests:
	MAC: Command + Q
	Windows: Control + Q
============================

How to run automated tests using maven:

I use mvn clean test , to run the tests.

mvn clean install -U  can be used to run almost all maven lifecycle steps.

==============================

How do you handle syncronization in Selenium automation?

I use eighter implicit wait or explicit wait when it comes to syncronization.

implicit wait: waits until element is present in the html.
We type the implicit wait method once and it applies to all steps where we locate/find the elements.

driver.manage().timeOuts().implicitlyWait(10, TimeUnit.SECONDS);

The above command affects the findElement(s) method.
It will make sure that selenium waits for the element up to 10 seconds to appear in the html.
If element appears in lets say 2 seconds, it will not keep waiting until 10.
If element does not appear in 10 seconds, it will throw NoSuchElement exception.

-------------------

What if i want to wait for certain condition of particular webelement? like need to wait until button is enabled, link is clickable, or some icon until it disappears.

For those cases and more, we use EXPLICIT WAIT.

This wait has many useful conditional waiting commmands.

Sir/Ma'am - What was your challenge in your project?

My application uses make AJAX calls. And I kept getting different exceptions. So I used Explicit waits to handle the syncronization issue.

AJAX -> Asyncronous Javascript and Xml

Your page does not reload/refresh completely.
It only reloads partially. Only certain section of the page reloads.

So selenium needs to wait until certain element is visible or enabled etc.

==========================

Also sometimes elements are hidden , but they are in the html.
So findElement method will be able to locate them, but we cannot do any other actions like click, sendKeys etc.

So for those type scenarios, we need EXPLICIT wait.

-----------------------

How to use EXPLICIT WAIT:

#1 WebDriverWait class object and pass a driver and time out seconds to constructor.

#2 We need to use ExpectedConditions class method for webelement or for whole page.

EX:
	WebDriverWait wait = new WebDriverWait(driver, 10);
	wait.until(ExpectedConditions.visiblityOfElement(someElem));
====================================

Thread.sleep(1000);  -> it is a hardcoded wait time, that comes with java. and should be avoided as much as possible. It does not have any conditions and might slow down execution.

====================================

What is the difference between Implicit wait and explicit wait?

-> Implicit wait time is set once globally and applies to all steps.
-> Explicit wait is applied to a specific element on the page

-> Implicit wait works with findElement method and waits until element is present in html/dom (document object model)
-> Explicit wait can be applied with different conditions that are available in ExpectedConditions class

-> Implicit wait stops waiting as soon as element is found in the html/dom
-> Explicit wait stops waiting when certain condition is met. like visibility of elem. or enable of elem etc

-> Implicit wait throws NoSuchElementException if element does not appear in html/dom during the timeout
-> Explicit wait throws TimeOutException if condition is not met within the specified seconds
=====================================
day20 -> comcast task
day21 -> Thursday class with Oscar

add new package day22_explicitwait_review

add new class WaitUntilElemVisibleTest

@Test
public void waitForWebDriverElem() {

}

seleniumpractice.url=http://seleniumpractise.blogspot.com/2016/08/how-to-use-explicit-wait-in-selenium.html

please goto TestBase class
and comment Lines related to WebDriverWait
==============================

WebDriverWait wait = new WebDriverWait(driver, 30);
wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//p[.='WebDriver']")));



WebDriverWait class is used for Explicit wait in Selenium.
we specify our driver object and timeout seconds in constructor.

wait.until() -> method is used to wait until certain condition becomes true.

wait.until(ExpectedConditions.trafficLightToBeGreen());

ExpectedConditions.visibilityOfElementLocated(By.xpath("//p[.='WebDriver']") => is used to specify the condition.
This class has many methods that we can use as a condition.

visibilityOfElementLocated(By.xpath("//p[.='WebDriver']") => this method accepts a By locator and waits until it is visible on the page.

Lets say, you can locate the webelement using ID, and need to wait for the text to change to "WebDriver". In that case we can use the condition the following way:

wait.until(ExpectedConditions.textToBe( By.id("demo") ,"WebDriver" ));

textToBe(locator(By.locator), expectedText)
============================

@Test
public void cheapInternetSpeedTest() {

}

speedtest.url=https://www.speedtest.net

wait.until(ExpectedConditions.invisibilityOfElementLocated(By.className("gauge-speed-text"))); => accepts By.locator and waits until element that matches the locator disappears

wait.until(ExpectedConditions.invisibilityOf(driver.findElement(By.className("gauge-speed-text")))); ==> accepts WebElement, wait until that elem disappears

WebElement loading = driver.findElement(By.className("gauge-speed-text"));
wait.until(ExpectedConditions.invisibilityOf(loading));


org.openqa.selenium.TimeoutException: Expected condition failed: waiting for invisibility of [[ChromeDriver: chrome on MAC (34d640a4d0f4e4d084ce3a31c8081ee3)] -> class name: gauge-speed-text] (tried for 6 second(s) with 500 milliseconds interval)

The above error means that Explicit wait condition was not met within specified time window(6 seconds).

In this case , we can increase timeout seconds.


Sedat Berk â€” Today at 3:57 PM
if we put 2 minutes and its done in 30 second its ganna go next element after 30 second or 2 minutes?

No, it will not keep waiting for 2 minutes. once the condition is met in 30 seconds, it will goto next step.
=======================================

chercher.url=https://chercher.tech/practice/explicit-wait-sample-selenium-webdriver

add new class CherCherWaitPracticeTest

@BeforeMethod
public void gotoHomePage() {
	driver.get(ConfigurationReader.getProperty("chercher.url"));
}

@Test
public void waitForAlertTest() {

}

@Test
public void waitForButtonEnabledTest() {

}

@Test
public void waitForCheckBoxIsCheckedTest() {

}

when we have @BeforeMethod in both TestBase and Test child classes, @BeforeMethod of TestBase parent class runs first, then @BeforeMethod of child class runs.
It is useful when @Test methods need same initial step.
